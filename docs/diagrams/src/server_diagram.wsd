@startuml

package com.michal {
    interface Mediator {
        +handleCreateGame(ClientHandler clientHandler, int players)
        +handleJoinGame(ClientHandler clientHandler, int gameId)
        +handleMove(ClientHandler clientHandler, int x, int y)
        +handlePass(ClientHandler clientHandler)
        +handleListGames(ClientHandler clientHandler)
        +removeClient(ClientHandler clientHandler)
    }

    interface PlayerCommunicator {
        +sendMessage(String msg)
        +sendError(String msg)
        +sendGameInfo(GameInfo gameInfo)
        +sendBoard(String board)
    }

    interface ICommunication {
        +sendMessage(String msg, ObjectOutputStream out)
        +sendListMessage(List<GameInfo> list, ObjectOutputStream out)
        +sendError(String msg, ObjectOutputStream out)
        +sendGameInfo(GameInfo gameInfo, ObjectOutputStream out)
        +sendBoard(String board, ObjectOutputStream out)
    }

    interface GameSessionMediator {
        +removeSession(GameSession session)
    }


    class ClientHandler implements Runnable, PlayerCommunicator {
        -Socket socket
        -Mediator mediator
        -ICommunication communication
        -ObjectInputStream in
        -ObjectOutputStream out
        -volatile Player player
        -volatile boolean inGame
        -UUID id
        -Logger logger
        +ClientHandler(Socket socket, Mediator mediator)
        +synchronized UUID getId()
        +sendMessage(String msg)
        +sendListMessage(List<GameInfo> list)
        +sendGameInfo(GameInfo gameInfo)
        +sendBoard(String board)
        +sendError(String msg)
        +synchronized Player getPlayer()
        +synchronized void setPlayer(Player player)
        +synchronized boolean isInGame()
        +synchronized void setInGame(boolean inGame)
        +run()
        -handleMessage(String msg)
    }


    class Server implements Mediator, GameSessionMediator {
        -ServerSocket serverSocket
        -static final int PORT = 8085
        -List<GameSession> gameSessions
        -List<ClientHandler> clients
        +startServer()
        +List<GameSession> getGameSessions()
        +handleCreateGame(ClientHandler clientHandler, int boardSize, Layout layout, Variant variant)
        +handleJoinGame(ClientHandler clientHandler, int gameId)
        +handleMove(ClientHandler clientHandler, Position start, Position end)
        +handleListGames(ClientHandler clientHandler)
        +removeClient(ClientHandler client)
        +removeSession(GameSession session)
        +handlePass(ClientHandler clientHandler)
    }

    class SocketCommunication implements ICommunication {
        -Socket socket
        -Logger logger
        +SocketCommunication(Socket socket)
        +synchronized void sendMessage(String msg, ObjectOutputStream out)
        +synchronized void sendListMessage(List<GameInfo> list, ObjectOutputStream out)
        +synchronized void sendError(String msg, ObjectOutputStream out)
        +synchronized void sendGameInfo(GameInfo gameInfo, ObjectOutputStream out)
        +synchronized void sendBoard(String board, ObjectOutputStream out)
    }
}

package com.michal.Game {
    abstract class Board {
        -Node[][] board
        +List<Integer> getAllowedPlayerNumbers()
        +void move(Position start, Position end)
        +void print()
        +Player checkIfSomeoneWon(List<Player> players)
        +void initialize(Layout layout, List<Player> players)
        +boolean validateMove(Player player, Position start, Position end)
        +Node[][] getBoardArray()
    }

    class StarBoard extends Board {
        -int size
        -Node[][] board
        -MoveValidator moveValidator
        +StarBoard(int size, MoveValidator moveValidator)
        +List<Integer> getAllowedPlayerNumbers()
        +void move(Position start, Position end)
        +void print()
        +Player checkIfSomeoneWon(List<Player> players)
        +void initialize(Layout layout, List<Player> players)
        +boolean validateMove(Player player, Position start, Position end)
        +Node[][] getBoardArray()
    }

    class Game {
        -Board board
        -int maxPlayers
        -GameStatus status
        -Layout layout
        -Variant variant
        +Game(Board board, Layout layout, Variant variant)
        +void start(List<Player> players)
        +move(Player player, Position start, Position end)
        +GameStatus getStatus()
        +int getMaxPlayers()
        +Node[][] getBoardArray()
        +Layout getLayout()
        +Variant getVariant()
        +Player checkIfSomeoneWon(List<Player> players)
    }

    class GameInfo {
        -int id
        -int currentPlayers
        -int maxPlayers
        +GameInfo(int id, int currentPlayers, int maxPlayers)
        +int getId()
        +void setId(int id)
        +int getCurrentPlayers()
        +void setCurrentPlayers(int currentPlayers)
        +int getMaxPlayers()
        +void setMaxPlayers(int maxPlayers)
        +String toString()
        +String getLayout()
        +String getVariant()
    }

    class GameQueue {
        -Queue<Player> players
        +GameQueue()
        +synchronized Player takePlayer()
        +synchronized void addPlayer(Player player)
        +int getSize()
        +boolean containsPlayer(Player player)
        +List<Player> getPlayers()
    }

    class GameSession {
        -static AtomicInteger sessionCounter = new AtomicInteger(1)
        -int sessionId
        -Game game
        -List<Player> players
        -GameQueue gameQueue
        -GameSessionMediator server
        -Queue<String> availableColors
        +static List<String> COLORS
        +GameSession(Board board, Layout layout, Variant variant, GameSessionMediator server)
        +int getSessionId()
        +synchronized void addPlayer(Player player)
        +synchronized void removePlayer(Player player)
        +synchronized void startGame()
        +synchronized void handleMove(Player player, Position start, Position end)
        +synchronized void promptNextPlayer()
        +void broadcastMessage(String message)
        +void broadcastBoard(String board)
        +void handlePass(Player player)
    }

    enum GameStatus {
        WAITING
        IN_PROGRESS
        FINISHED
    }

    class Player {
        -UUID id
        -PlayerCommunicator communicator
        -String name
        -GameSession gameSession
        -String color
        +Player(UUID id, PlayerCommunicator communicator)
        +synchronized void sendMessage(String message)
        +synchronized void sendError(String message)
        +synchronized void sendGameInfo(GameInfo gameInfo)
        +synchronized void sendBoard(String board)
        +UUID getId()
        +String getName()
        +PlayerCommunicator getCommunicator()
        +GameSession getGameSession()
        +void setGameSession(GameSession gameSession)
        +String getColor()
        +void setColor(String color)
    }

    class Position {
        // Methods and attributes not specified
    }

    class Pawn {
        -Player player
        +Player getPlayer()
        +void setPlayer(Player player)
    }

    class Node {
        -Pawn pawn
        -Player owner
        +Pawn getPawn()
        +void setPawn(Pawn pawn)
        +Player getOwner()
        +void setOwner(Player owner)
    }

    class CornerNode extends Node {
        -Direction direction
        +Direction getDirection()
    }

    enum Direction {
        NORTH
        SOUTH
        NORTHWEST
        NORTHEAST
        SOUTHWEST
        SOUTHEAST
    }

    enum Layout {
        SIXPLAYERS
        FOURPLAYERS
        THREEPLAYERS_ONESET
        THREEPLAYERS_TWOSETS
        TWOPLAYERS_ONESET,
        TWOPLAYERS_TWOSETS_ADJACENT
        TWOPLAYERS_TWOSETS_OPPOSITE
        TWOPLAYERS_THREESETS
    }

    enum Variant {
        STANDARD
        SUPER
    }

    interface MoveValidator {
        +HashSet<Position> getValidMoves(Node[][] board, Position start)
        +default boolean isValidMove(Node[][] board, Player player, Position start, Position end)
    }

    class MoveValidatorStandard implements MoveValidator {
        +HashSet<Position> getValidMoves(Node[][] board, Position start)
    }

    class MoveValidatorSuper implements MoveValidator {
        +HashSet<Position> getValidMoves(Node[][] board, Position start)
    }
}

package com.michal.Utils {
    class JsonDeserializer {
        +static JsonDeserializer getInstance()
        +JsonObject deserialize(String json) throws JsonSyntaxException
        +String getCommand(String json) throws JsonSyntaxException
        +JsonObject getPayload(String json) throws JsonSyntaxException
        +boolean isError(String json) throws JsonSyntaxException
        +String getErrorMessage(String json) throws JsonSyntaxException
    }

    class MyLogger {
        +static void loggerConfig()
        +static Logger logger
    }

    class BoardStringBuilder {
        +static String buildBoardString(Node[][] board)
    }

    class StarBuilder {
        +static String buildStar(int size)
    }
}

com.michal.ClientHandler --> com.michal.Server : uses
com.michal.ClientHandler --> com.michal.SocketCommunication : uses
com.michal.Server --> com.michal.Game.GameSession : manages
com.michal.Game.GameSession --> com.michal.Game.Game : has
com.michal.Game.GameSession --> com.michal.Game.Player : manages
com.michal.Game.GameSession --> com.michal.Game.GameQueue : uses
com.michal.Game.Game --> com.michal.Game.Board.Board : uses
com.michal.Game.Player --> com.michal.PlayerCommunicator : communicates
com.michal.ClientHandler -> com.michal.Utils.JsonDeserializer : uses
com.michal.Game.Board.Board --> com.michal.Game.Board.Node : contains
com.michal.Game.Game --> com.michal.Game.GameStatus : has
com.michal.Game.Game --> com.michal.Game.Board.Layout : has
com.michal.Game.Game --> com.michal.Game.Variant : has
com.michal.Game.Board.Board --> com.michal.Game.MoveValidation.MoveValidator : uses
com.michal.Game.Board.Node --> com.michal.Game.Board.Pawn : contains

com.michal.Game.Board.StarBoard --> com.michal.Utils.StarBuilder : uses

@enduml