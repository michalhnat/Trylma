@startuml

package com.michal {
    interface Mediator {
        +handleCreateGame(ClientHandler clientHandler, int players)
        +handleJoinGame(ClientHandler clientHandler, int gameId)
        +handleMove(ClientHandler clientHandler, int x, int y)
        +handleListGames(ClientHandler clientHandler)
        +removeClient(ClientHandler clientHandler)
    }

    interface PlayerCommunicator {
        +sendMessage(String msg)
        +sendListMessage(List<GameInfo> list)
        +sendError(String msg)
    }

    interface ICommunication {
        +sendMessage(String msg, ObjectOutputStream out)
        +sendListMessage(List<GameInfo> list, ObjectOutputStream out)
        +sendError(String msg, ObjectOutputStream out)
    }

    interface GameSessionMediator {
        +removeSession(GameSession session)
    }


    class ClientHandler implements Runnable, PlayerCommunicator {
        -Socket socket
        -Mediator mediator
        -ICommunication communication
        -ObjectInputStream in
        -ObjectOutputStream out
        -volatile Player player
        -volatile boolean inGame
        -UUID id
        -Logger logger
        +ClientHandler(Socket socket, Mediator mediator)
        +synchronized UUID getId()
        +sendMessage(String msg)
        +sendListMessage(List<GameInfo> list)
        +sendError(String msg)
        +synchronized Player getPlayer()
        +synchronized void setPlayer(Player player)
        +synchronized boolean isInGame()
        +synchronized void setInGame(boolean inGame)
        +run()
        -handleMessage(String msg)
    }


    class Server implements Mediator, GameSessionMediator {
        -ServerSocket serverSocket
        -static final int PORT = 8085
        -List<GameSession> gameSessions
        -List<ClientHandler> clients
        +startServer()
        +List<GameSession> getGameSessions()
        +handleCreateGame(ClientHandler clientHandler, int players)
        +handleJoinGame(ClientHandler clientHandler, int gameId)
        +handleMove(ClientHandler clientHandler, int x, int y)
        +handleListGames(ClientHandler clientHandler)
        +removeClient(ClientHandler client)
        +removeSession(GameSession session)
    }

    class SocketCommunication implements ICommunication {
        -Socket socket
        -Logger logger
        +SocketCommunication(Socket socket)
        +synchronized void sendMessage(String msg, ObjectOutputStream out)
        +synchronized void sendListMessage(List<GameInfo> list, ObjectOutputStream out)
        +synchronized void sendError(String msg, ObjectOutputStream out)
    }
}

package com.michal.Game {
    abstract class Board {
        +List<Integer> getAllowedPlayerNumbers()
        +void move(Position start, Position end)
        +void print()
        +boolean isGameOver()
        +void initialize()
        +boolean validateMove(Position start, Position end)
    }

    class MockBoard extends Board {
        -int size = 8
        -String[][] board = new String[size][size]
        -List<Integer> allowedPlayerNumbers
        +MockBoard()
        +List<Integer> getAllowedPlayerNumbers()
        +void move(Position start, Position end)
        +void print()
        +boolean isGameOver()
        +void initialize()
        +boolean validateMove(Position start, Position end)
    }

    class Game {
        -Board board
        -int maxPlayers
        -GameStatus status
        +Game(Board board, int maxPlayers)
        +boolean isInProgress()
        +int getMaxPlayers()
        // Additional game logic methods
    }

    class GameInfo {
        -int id
        -int currentPlayers
        -int maxPlayers
        +GameInfo(int id, int currentPlayers, int maxPlayers)
        +int getId()
        +void setId(int id)
        +int getCurrentPlayers()
        +void setCurrentPlayers(int currentPlayers)
        +int getMaxPlayers()
        +void setMaxPlayers(int maxPlayers)
        +String toString()
    }

    class GameQueue {
        -Queue<Player> players
        +GameQueue()
        +synchronized Player takePlayer()
        +synchronized void addPlayer(Player player)
        +int getSize()
        +boolean containsPlayer(Player player)
    }

    class GameSession {
        -static AtomicInteger sessionCounter = new AtomicInteger(1)
        -int sessionId
        -Game game
        -List<Player> players
        -GameQueue gameQueue
        -GameSessionMediator server
        -Queue<String> availableColors
        +static List<String> COLORS
        +GameSession(Board board, int maxPlayers, GameSessionMediator server)
        +int getSessionId()
        +synchronized void addPlayer(Player player)
        +synchronized void removePlayer(Player player)
        +synchronized void startGame()
        +synchronized void handleMove(Player player, Position newPosition)
        +synchronized void promptNextPlayer()
    }

    enum GameStatus {
        WAITING
        IN_PROGRESS
        FINISHED
    }

    class Player {
        -UUID id
        -PlayerCommunicator communicator
        -String name
        -Set<Pawn> pawns
        -GameSession gameSession
        -String color
        +Player(UUID id, PlayerCommunicator communicator)
        +synchronized void sendMessage(String message)
        +synchronized void sendError(String message)
        +UUID getId()
        +String getName()
        +PlayerCommunicator getCommunicator()
        +Set<Pawn> getPawns()
        +void addPawn(Pawn pawn)
        +GameSession getGameSession()
        +void setGameSession(GameSession gameSession)
        +String getColor()
        +void setColor(String color)
    }

    class Position {
        // Methods and attributes not specified
    }

    class Pawn {
        // Methods and attributes not specified
    }
}

package com.michal.Utils {
    class JsonDeserializer {
        +static JsonDeserializer getInstance()
        +JsonObject deserialize(String json) throws JsonSyntaxException
        +String getCommand(String json) throws JsonSyntaxException
        +JsonObject getPayload(String json) throws JsonSyntaxException
        +boolean isError(String json) throws JsonSyntaxException
        +String getErrorMessage(String json) throws JsonSyntaxException
    }

    class MyLogger {
        +static void loggerConfig()
        +static Logger logger
    }
}

com.michal.ClientHandler --> com.michal.Server : uses
com.michal.ClientHandler --> com.michal.SocketCommunication : uses
com.michal.Server --> com.michal.Game.GameSession : manages
com.michal.Game.GameSession --> com.michal.Game.Game : has
com.michal.Game.GameSession --> com.michal.Game.Player : manages
com.michal.Game.GameSession --> com.michal.Game.GameQueue : uses
com.michal.Game.Game --> com.michal.Game.Board : uses
com.michal.Game.Player --> com.michal.PlayerCommunicator : communicates
com.michal.ClientHandler -> com.michal.Utils.JsonDeserializer : uses
com.michal.Game.Board <|-- com.michal.Game.MockBoard

@enduml